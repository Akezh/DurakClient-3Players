// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/durak.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DurakServer {

  /// <summary>Holder for reflection information generated from Protos/durak.proto</summary>
  public static partial class DurakReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/durak.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DurakReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvZHVyYWsucHJvdG8SBWR1cmFrIr8CCgxEdXJha1JlcXVlc3QS",
            "KQoLcGxheVJlcXVlc3QYASABKAsyEi5kdXJhay5QbGF5UmVxdWVzdEgAEi0K",
            "DWRpYWxvZ1JlcXVlc3QYAiABKAsyFC5kdXJhay5EaWFsb2dSZXF1ZXN0SAAS",
            "KQoLdHVyblJlcXVlc3QYAyABKAsyEi5kdXJhay5UdXJuUmVxdWVzdEgAEjMK",
            "EGVuZEF0dGFja1JlcXVlc3QYBCABKAsyFy5kdXJhay5FbmRBdHRhY2tSZXF1",
            "ZXN0SAASNQoRZW5kRGVmZW5jZVJlcXVlc3QYBSABKAsyGC5kdXJhay5FbmRE",
            "ZWZlbmNlUmVxdWVzdEgAEjMKEGVuZEFkZGluZ1JlcXVlc3QYBiABKAsyFy5k",
            "dXJhay5FbmRBZGRpbmdSZXF1ZXN0SABCCQoHUmVxdWVzdCINCgtQbGF5UmVx",
            "dWVzdCIuCg1EaWFsb2dSZXF1ZXN0Eh0KBmRpYWxvZxgBIAEoDjINLmR1cmFr",
            "LkRpYWxvZyIoCgtUdXJuUmVxdWVzdBIZCgRjYXJkGAEgASgLMgsuZHVyYWsu",
            "Q2FyZCISChBFbmRBdHRhY2tSZXF1ZXN0IhMKEUVuZERlZmVuY2VSZXF1ZXN0",
            "IhIKEEVuZEFkZGluZ1JlcXVlc3QiMQoMVGltZXJSZXF1ZXN0Eg8KB2xvYmJ5",
            "SWQYASABKAUSEAoIdXNlcm5hbWUYAiABKAki1gMKCkR1cmFrUmVwbHkSJwoK",
            "bG9iYnlSZXBseRgBIAEoCzIRLmR1cmFrLkxvYmJ5UmVwbHlIABIpCgtkaWFs",
            "b2dSZXBseRgCIAEoCzISLmR1cmFrLkRpYWxvZ1JlcGx5SAASJQoJdHVyblJl",
            "cGx5GAMgASgLMhAuZHVyYWsuVHVyblJlcGx5SAASLwoOZW5kQXR0YWNrUmVw",
            "bHkYBCABKAsyFS5kdXJhay5FbmRBdHRhY2tSZXBseUgAEjEKD2VuZERlZmVu",
            "Y2VSZXBseRgFIAEoCzIWLmR1cmFrLkVuZERlZmVuY2VSZXBseUgAEi8KDmVu",
            "ZEFkZGluZ1JlcGx5GAYgASgLMhUuZHVyYWsuRW5kQWRkaW5nUmVwbHlIABI7",
            "ChRmaW5pc2hHYW1lUm91bmRSZXBseRgHIAEoCzIbLmR1cmFrLkZpbmlzaEdh",
            "bWVSb3VuZFJlcGx5SAASRQoZZW5hYmxlVHdvUGxheWVyc01vZGVSZXBseRgI",
            "IAEoCzIgLmR1cmFrLkVuYWJsZVR3b1BsYXllcnNNb2RlUmVwbHlIABIrCgxn",
            "YW1lRW5kUmVwbHkYCSABKAsyEy5kdXJhay5HYW1lRW5kUmVwbHlIAEIHCgVS",
            "ZXBseSKnAQoKTG9iYnlSZXBseRIKCgJpZBgBIAEoBRImCgdpUGxheWVyGAIg",
            "ASgLMhUuZHVyYWsuRHVyYWtOZXRQbGF5ZXISKwoMZW5lbXlQbGF5ZXJzGAMg",
            "AygLMhUuZHVyYWsuRHVyYWtOZXRQbGF5ZXISHAoHZGVja0JveBgEIAMoCzIL",
            "LmR1cmFrLkNhcmQSGgoFdHJ1bXAYBSABKAsyCy5kdXJhay5DYXJkIj4KC0Rp",
            "YWxvZ1JlcGx5Eh0KBmRpYWxvZxgBIAEoDjINLmR1cmFrLkRpYWxvZxIQCgh1",
            "c2VybmFtZRgCIAEoCSImCglUdXJuUmVwbHkSGQoEY2FyZBgBIAEoCzILLmR1",
            "cmFrLkNhcmQiZQoORW5kQXR0YWNrUmVwbHkSJgoHaVBsYXllchgBIAEoCzIV",
            "LmR1cmFrLkR1cmFrTmV0UGxheWVyEisKDGVuZW15UGxheWVycxgCIAMoCzIV",
            "LmR1cmFrLkR1cmFrTmV0UGxheWVyImYKD0VuZERlZmVuY2VSZXBseRImCgdp",
            "UGxheWVyGAEgASgLMhUuZHVyYWsuRHVyYWtOZXRQbGF5ZXISKwoMZW5lbXlQ",
            "bGF5ZXJzGAIgAygLMhUuZHVyYWsuRHVyYWtOZXRQbGF5ZXIiZQoORW5kQWRk",
            "aW5nUmVwbHkSJgoHaVBsYXllchgBIAEoCzIVLmR1cmFrLkR1cmFrTmV0UGxh",
            "eWVyEisKDGVuZW15UGxheWVycxgCIAMoCzIVLmR1cmFrLkR1cmFrTmV0UGxh",
            "eWVyImsKFEZpbmlzaEdhbWVSb3VuZFJlcGx5EiYKB2lQbGF5ZXIYASABKAsy",
            "FS5kdXJhay5EdXJha05ldFBsYXllchIrCgxlbmVteVBsYXllcnMYAiADKAsy",
            "FS5kdXJhay5EdXJha05ldFBsYXllciJwChlFbmFibGVUd29QbGF5ZXJzTW9k",
            "ZVJlcGx5EiYKB2lQbGF5ZXIYASABKAsyFS5kdXJhay5EdXJha05ldFBsYXll",
            "chIrCgxlbmVteVBsYXllcnMYAiADKAsyFS5kdXJhay5EdXJha05ldFBsYXll",
            "ciJOCgxHYW1lRW5kUmVwbHkSKgoNd2lubmVyUGxheWVycxgBIAMoCzITLmR1",
            "cmFrLldpbm5lclBsYXllchISCgp3aW5NZXNzYWdlGAIgASgJIjMKDFdpbm5l",
            "clBsYXllchIQCgh1c2VybmFtZRgBIAEoCRIRCgliZWV0Q291bnQYAiABKAUi",
            "LAoKVGltZXJSZXBseRIMCgR0aW1lGAEgASgFEhAKCHVzZXJuYW1lGAIgASgJ",
            "IlgKDkR1cmFrTmV0UGxheWVyEhAKCHVzZXJuYW1lGAEgASgJEhkKBGhhbmQY",
            "AiADKAsyCy5kdXJhay5DYXJkEhkKBHJvbGUYAyABKA4yCy5kdXJhay5Sb2xl",
            "IjwKBENhcmQSGQoEcmFuaxgBIAEoDjILLmR1cmFrLlJhbmsSGQoEc3VpdBgC",
            "IAEoDjILLmR1cmFrLlN1aXQqagoEUmFuaxIICgROb25lEAASBwoDU2l4EAYS",
            "CQoFU2V2ZW4QBxIJCgVFaWdodBAIEggKBE5pbmUQCRIHCgNUZW4QChIICgRK",
            "YWNrEAsSCQoFUXVlZW4QDBIICgRLaW5nEA0SBwoDQWNlEA4qMwoEU3VpdBII",
            "CgRDbHViEAASCwoHRGlhbW9uZBABEgkKBUhlYXJ0EAISCQoFU3BhZGUQAypb",
            "CgRSb2xlEgwKCEF0dGFja2VyEAASDAoIRGVmZW5kZXIQARIJCgVBZGRlchAC",
            "EgoKBldhaXRlchADEhIKDkZvcm1lckF0dGFja2VyEAQSDAoISW5hY3RpdmUQ",
            "BSpECgZTdGF0dXMSDgoKY2FuTm90aGluZxAAEg0KCWNhbkF0dGFjaxABEg4K",
            "CmNhbkRlZmVuY2UQAhILCgdjYW5QYXNzEAMqSwoGRGlhbG9nEgYKAk9pEAAS",
            "BgoCSGkQARIMCghOaWNlR2FtZRACEgwKCEdvb2RMdWNrEAMSCQoFSHVycnkQ",
            "BBIKCgZUaGFua3MQBTKKAQoJRHVyYWtHYW1lEjwKDkR1cmFrU3RyZWFtaW5n",
            "EhMuZHVyYWsuRHVyYWtSZXF1ZXN0GhEuZHVyYWsuRHVyYWtSZXBseSgBMAES",
            "PwoTU3RhcnRUaW1lclN0cmVhbWluZxITLmR1cmFrLlRpbWVyUmVxdWVzdBoR",
            "LmR1cmFrLlRpbWVyUmVwbHkwAUIOqgILRHVyYWtTZXJ2ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DurakServer.Rank), typeof(global::DurakServer.Suit), typeof(global::DurakServer.Role), typeof(global::DurakServer.Status), typeof(global::DurakServer.Dialog), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.DurakRequest), global::DurakServer.DurakRequest.Parser, new[]{ "PlayRequest", "DialogRequest", "TurnRequest", "EndAttackRequest", "EndDefenceRequest", "EndAddingRequest" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.PlayRequest), global::DurakServer.PlayRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.DialogRequest), global::DurakServer.DialogRequest.Parser, new[]{ "Dialog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.TurnRequest), global::DurakServer.TurnRequest.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EndAttackRequest), global::DurakServer.EndAttackRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EndDefenceRequest), global::DurakServer.EndDefenceRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EndAddingRequest), global::DurakServer.EndAddingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.TimerRequest), global::DurakServer.TimerRequest.Parser, new[]{ "LobbyId", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.DurakReply), global::DurakServer.DurakReply.Parser, new[]{ "LobbyReply", "DialogReply", "TurnReply", "EndAttackReply", "EndDefenceReply", "EndAddingReply", "FinishGameRoundReply", "EnableTwoPlayersModeReply", "GameEndReply" }, new[]{ "Reply" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.LobbyReply), global::DurakServer.LobbyReply.Parser, new[]{ "Id", "IPlayer", "EnemyPlayers", "DeckBox", "Trump" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.DialogReply), global::DurakServer.DialogReply.Parser, new[]{ "Dialog", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.TurnReply), global::DurakServer.TurnReply.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EndAttackReply), global::DurakServer.EndAttackReply.Parser, new[]{ "IPlayer", "EnemyPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EndDefenceReply), global::DurakServer.EndDefenceReply.Parser, new[]{ "IPlayer", "EnemyPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EndAddingReply), global::DurakServer.EndAddingReply.Parser, new[]{ "IPlayer", "EnemyPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.FinishGameRoundReply), global::DurakServer.FinishGameRoundReply.Parser, new[]{ "IPlayer", "EnemyPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.EnableTwoPlayersModeReply), global::DurakServer.EnableTwoPlayersModeReply.Parser, new[]{ "IPlayer", "EnemyPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.GameEndReply), global::DurakServer.GameEndReply.Parser, new[]{ "WinnerPlayers", "WinMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.WinnerPlayer), global::DurakServer.WinnerPlayer.Parser, new[]{ "Username", "BeetCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.TimerReply), global::DurakServer.TimerReply.Parser, new[]{ "Time", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.DurakNetPlayer), global::DurakServer.DurakNetPlayer.Parser, new[]{ "Username", "Hand", "Role" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DurakServer.Card), global::DurakServer.Card.Parser, new[]{ "Rank", "Suit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Rank {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Six")] Six = 6,
    [pbr::OriginalName("Seven")] Seven = 7,
    [pbr::OriginalName("Eight")] Eight = 8,
    [pbr::OriginalName("Nine")] Nine = 9,
    [pbr::OriginalName("Ten")] Ten = 10,
    [pbr::OriginalName("Jack")] Jack = 11,
    [pbr::OriginalName("Queen")] Queen = 12,
    [pbr::OriginalName("King")] King = 13,
    [pbr::OriginalName("Ace")] Ace = 14,
  }

  public enum Suit {
    [pbr::OriginalName("Club")] Club = 0,
    [pbr::OriginalName("Diamond")] Diamond = 1,
    [pbr::OriginalName("Heart")] Heart = 2,
    [pbr::OriginalName("Spade")] Spade = 3,
  }

  public enum Role {
    [pbr::OriginalName("Attacker")] Attacker = 0,
    [pbr::OriginalName("Defender")] Defender = 1,
    [pbr::OriginalName("Adder")] Adder = 2,
    [pbr::OriginalName("Waiter")] Waiter = 3,
    [pbr::OriginalName("FormerAttacker")] FormerAttacker = 4,
    [pbr::OriginalName("Inactive")] Inactive = 5,
  }

  public enum Status {
    [pbr::OriginalName("canNothing")] CanNothing = 0,
    [pbr::OriginalName("canAttack")] CanAttack = 1,
    [pbr::OriginalName("canDefence")] CanDefence = 2,
    [pbr::OriginalName("canPass")] CanPass = 3,
  }

  public enum Dialog {
    [pbr::OriginalName("Oi")] Oi = 0,
    [pbr::OriginalName("Hi")] Hi = 1,
    [pbr::OriginalName("NiceGame")] NiceGame = 2,
    [pbr::OriginalName("GoodLuck")] GoodLuck = 3,
    [pbr::OriginalName("Hurry")] Hurry = 4,
    [pbr::OriginalName("Thanks")] Thanks = 5,
  }

  #endregion

  #region Messages
  public sealed partial class DurakRequest : pb::IMessage<DurakRequest> {
    private static readonly pb::MessageParser<DurakRequest> _parser = new pb::MessageParser<DurakRequest>(() => new DurakRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurakRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakRequest(DurakRequest other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.PlayRequest:
          PlayRequest = other.PlayRequest.Clone();
          break;
        case RequestOneofCase.DialogRequest:
          DialogRequest = other.DialogRequest.Clone();
          break;
        case RequestOneofCase.TurnRequest:
          TurnRequest = other.TurnRequest.Clone();
          break;
        case RequestOneofCase.EndAttackRequest:
          EndAttackRequest = other.EndAttackRequest.Clone();
          break;
        case RequestOneofCase.EndDefenceRequest:
          EndDefenceRequest = other.EndDefenceRequest.Clone();
          break;
        case RequestOneofCase.EndAddingRequest:
          EndAddingRequest = other.EndAddingRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakRequest Clone() {
      return new DurakRequest(this);
    }

    /// <summary>Field number for the "playRequest" field.</summary>
    public const int PlayRequestFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.PlayRequest PlayRequest {
      get { return requestCase_ == RequestOneofCase.PlayRequest ? (global::DurakServer.PlayRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PlayRequest;
      }
    }

    /// <summary>Field number for the "dialogRequest" field.</summary>
    public const int DialogRequestFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DialogRequest DialogRequest {
      get { return requestCase_ == RequestOneofCase.DialogRequest ? (global::DurakServer.DialogRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.DialogRequest;
      }
    }

    /// <summary>Field number for the "turnRequest" field.</summary>
    public const int TurnRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.TurnRequest TurnRequest {
      get { return requestCase_ == RequestOneofCase.TurnRequest ? (global::DurakServer.TurnRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TurnRequest;
      }
    }

    /// <summary>Field number for the "endAttackRequest" field.</summary>
    public const int EndAttackRequestFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EndAttackRequest EndAttackRequest {
      get { return requestCase_ == RequestOneofCase.EndAttackRequest ? (global::DurakServer.EndAttackRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.EndAttackRequest;
      }
    }

    /// <summary>Field number for the "endDefenceRequest" field.</summary>
    public const int EndDefenceRequestFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EndDefenceRequest EndDefenceRequest {
      get { return requestCase_ == RequestOneofCase.EndDefenceRequest ? (global::DurakServer.EndDefenceRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.EndDefenceRequest;
      }
    }

    /// <summary>Field number for the "endAddingRequest" field.</summary>
    public const int EndAddingRequestFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EndAddingRequest EndAddingRequest {
      get { return requestCase_ == RequestOneofCase.EndAddingRequest ? (global::DurakServer.EndAddingRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.EndAddingRequest;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "Request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      PlayRequest = 1,
      DialogRequest = 2,
      TurnRequest = 3,
      EndAttackRequest = 4,
      EndDefenceRequest = 5,
      EndAddingRequest = 6,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurakRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurakRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayRequest, other.PlayRequest)) return false;
      if (!object.Equals(DialogRequest, other.DialogRequest)) return false;
      if (!object.Equals(TurnRequest, other.TurnRequest)) return false;
      if (!object.Equals(EndAttackRequest, other.EndAttackRequest)) return false;
      if (!object.Equals(EndDefenceRequest, other.EndDefenceRequest)) return false;
      if (!object.Equals(EndAddingRequest, other.EndAddingRequest)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.PlayRequest) hash ^= PlayRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.DialogRequest) hash ^= DialogRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.TurnRequest) hash ^= TurnRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.EndAttackRequest) hash ^= EndAttackRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.EndDefenceRequest) hash ^= EndDefenceRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.EndAddingRequest) hash ^= EndAddingRequest.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.PlayRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayRequest);
      }
      if (requestCase_ == RequestOneofCase.DialogRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(DialogRequest);
      }
      if (requestCase_ == RequestOneofCase.TurnRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(TurnRequest);
      }
      if (requestCase_ == RequestOneofCase.EndAttackRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(EndAttackRequest);
      }
      if (requestCase_ == RequestOneofCase.EndDefenceRequest) {
        output.WriteRawTag(42);
        output.WriteMessage(EndDefenceRequest);
      }
      if (requestCase_ == RequestOneofCase.EndAddingRequest) {
        output.WriteRawTag(50);
        output.WriteMessage(EndAddingRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.PlayRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayRequest);
      }
      if (requestCase_ == RequestOneofCase.DialogRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DialogRequest);
      }
      if (requestCase_ == RequestOneofCase.TurnRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnRequest);
      }
      if (requestCase_ == RequestOneofCase.EndAttackRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndAttackRequest);
      }
      if (requestCase_ == RequestOneofCase.EndDefenceRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDefenceRequest);
      }
      if (requestCase_ == RequestOneofCase.EndAddingRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndAddingRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurakRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.PlayRequest:
          if (PlayRequest == null) {
            PlayRequest = new global::DurakServer.PlayRequest();
          }
          PlayRequest.MergeFrom(other.PlayRequest);
          break;
        case RequestOneofCase.DialogRequest:
          if (DialogRequest == null) {
            DialogRequest = new global::DurakServer.DialogRequest();
          }
          DialogRequest.MergeFrom(other.DialogRequest);
          break;
        case RequestOneofCase.TurnRequest:
          if (TurnRequest == null) {
            TurnRequest = new global::DurakServer.TurnRequest();
          }
          TurnRequest.MergeFrom(other.TurnRequest);
          break;
        case RequestOneofCase.EndAttackRequest:
          if (EndAttackRequest == null) {
            EndAttackRequest = new global::DurakServer.EndAttackRequest();
          }
          EndAttackRequest.MergeFrom(other.EndAttackRequest);
          break;
        case RequestOneofCase.EndDefenceRequest:
          if (EndDefenceRequest == null) {
            EndDefenceRequest = new global::DurakServer.EndDefenceRequest();
          }
          EndDefenceRequest.MergeFrom(other.EndDefenceRequest);
          break;
        case RequestOneofCase.EndAddingRequest:
          if (EndAddingRequest == null) {
            EndAddingRequest = new global::DurakServer.EndAddingRequest();
          }
          EndAddingRequest.MergeFrom(other.EndAddingRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::DurakServer.PlayRequest subBuilder = new global::DurakServer.PlayRequest();
            if (requestCase_ == RequestOneofCase.PlayRequest) {
              subBuilder.MergeFrom(PlayRequest);
            }
            input.ReadMessage(subBuilder);
            PlayRequest = subBuilder;
            break;
          }
          case 18: {
            global::DurakServer.DialogRequest subBuilder = new global::DurakServer.DialogRequest();
            if (requestCase_ == RequestOneofCase.DialogRequest) {
              subBuilder.MergeFrom(DialogRequest);
            }
            input.ReadMessage(subBuilder);
            DialogRequest = subBuilder;
            break;
          }
          case 26: {
            global::DurakServer.TurnRequest subBuilder = new global::DurakServer.TurnRequest();
            if (requestCase_ == RequestOneofCase.TurnRequest) {
              subBuilder.MergeFrom(TurnRequest);
            }
            input.ReadMessage(subBuilder);
            TurnRequest = subBuilder;
            break;
          }
          case 34: {
            global::DurakServer.EndAttackRequest subBuilder = new global::DurakServer.EndAttackRequest();
            if (requestCase_ == RequestOneofCase.EndAttackRequest) {
              subBuilder.MergeFrom(EndAttackRequest);
            }
            input.ReadMessage(subBuilder);
            EndAttackRequest = subBuilder;
            break;
          }
          case 42: {
            global::DurakServer.EndDefenceRequest subBuilder = new global::DurakServer.EndDefenceRequest();
            if (requestCase_ == RequestOneofCase.EndDefenceRequest) {
              subBuilder.MergeFrom(EndDefenceRequest);
            }
            input.ReadMessage(subBuilder);
            EndDefenceRequest = subBuilder;
            break;
          }
          case 50: {
            global::DurakServer.EndAddingRequest subBuilder = new global::DurakServer.EndAddingRequest();
            if (requestCase_ == RequestOneofCase.EndAddingRequest) {
              subBuilder.MergeFrom(EndAddingRequest);
            }
            input.ReadMessage(subBuilder);
            EndAddingRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayRequest : pb::IMessage<PlayRequest> {
    private static readonly pb::MessageParser<PlayRequest> _parser = new pb::MessageParser<PlayRequest>(() => new PlayRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRequest(PlayRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRequest Clone() {
      return new PlayRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DialogRequest : pb::IMessage<DialogRequest> {
    private static readonly pb::MessageParser<DialogRequest> _parser = new pb::MessageParser<DialogRequest>(() => new DialogRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DialogRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogRequest(DialogRequest other) : this() {
      dialog_ = other.dialog_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogRequest Clone() {
      return new DialogRequest(this);
    }

    /// <summary>Field number for the "dialog" field.</summary>
    public const int DialogFieldNumber = 1;
    private global::DurakServer.Dialog dialog_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Dialog Dialog {
      get { return dialog_; }
      set {
        dialog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DialogRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DialogRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dialog != other.Dialog) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dialog != 0) hash ^= Dialog.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dialog != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Dialog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dialog != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dialog);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DialogRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dialog != 0) {
        Dialog = other.Dialog;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dialog = (global::DurakServer.Dialog) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnRequest : pb::IMessage<TurnRequest> {
    private static readonly pb::MessageParser<TurnRequest> _parser = new pb::MessageParser<TurnRequest>(() => new TurnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnRequest(TurnRequest other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnRequest Clone() {
      return new TurnRequest(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::DurakServer.Card card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnRequest other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::DurakServer.Card();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::DurakServer.Card();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndAttackRequest : pb::IMessage<EndAttackRequest> {
    private static readonly pb::MessageParser<EndAttackRequest> _parser = new pb::MessageParser<EndAttackRequest>(() => new EndAttackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndAttackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAttackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAttackRequest(EndAttackRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAttackRequest Clone() {
      return new EndAttackRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndAttackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndAttackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndAttackRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class EndDefenceRequest : pb::IMessage<EndDefenceRequest> {
    private static readonly pb::MessageParser<EndDefenceRequest> _parser = new pb::MessageParser<EndDefenceRequest>(() => new EndDefenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndDefenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndDefenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndDefenceRequest(EndDefenceRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndDefenceRequest Clone() {
      return new EndDefenceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndDefenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndDefenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndDefenceRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class EndAddingRequest : pb::IMessage<EndAddingRequest> {
    private static readonly pb::MessageParser<EndAddingRequest> _parser = new pb::MessageParser<EndAddingRequest>(() => new EndAddingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndAddingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAddingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAddingRequest(EndAddingRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAddingRequest Clone() {
      return new EndAddingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndAddingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndAddingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndAddingRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TimerRequest : pb::IMessage<TimerRequest> {
    private static readonly pb::MessageParser<TimerRequest> _parser = new pb::MessageParser<TimerRequest>(() => new TimerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerRequest(TimerRequest other) : this() {
      lobbyId_ = other.lobbyId_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerRequest Clone() {
      return new TimerRequest(this);
    }

    /// <summary>Field number for the "lobbyId" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private int lobbyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LobbyId != 0) hash ^= LobbyId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LobbyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LobbyId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LobbyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LobbyId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimerRequest other) {
      if (other == null) {
        return;
      }
      if (other.LobbyId != 0) {
        LobbyId = other.LobbyId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LobbyId = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DurakReply : pb::IMessage<DurakReply> {
    private static readonly pb::MessageParser<DurakReply> _parser = new pb::MessageParser<DurakReply>(() => new DurakReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurakReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakReply(DurakReply other) : this() {
      switch (other.ReplyCase) {
        case ReplyOneofCase.LobbyReply:
          LobbyReply = other.LobbyReply.Clone();
          break;
        case ReplyOneofCase.DialogReply:
          DialogReply = other.DialogReply.Clone();
          break;
        case ReplyOneofCase.TurnReply:
          TurnReply = other.TurnReply.Clone();
          break;
        case ReplyOneofCase.EndAttackReply:
          EndAttackReply = other.EndAttackReply.Clone();
          break;
        case ReplyOneofCase.EndDefenceReply:
          EndDefenceReply = other.EndDefenceReply.Clone();
          break;
        case ReplyOneofCase.EndAddingReply:
          EndAddingReply = other.EndAddingReply.Clone();
          break;
        case ReplyOneofCase.FinishGameRoundReply:
          FinishGameRoundReply = other.FinishGameRoundReply.Clone();
          break;
        case ReplyOneofCase.EnableTwoPlayersModeReply:
          EnableTwoPlayersModeReply = other.EnableTwoPlayersModeReply.Clone();
          break;
        case ReplyOneofCase.GameEndReply:
          GameEndReply = other.GameEndReply.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakReply Clone() {
      return new DurakReply(this);
    }

    /// <summary>Field number for the "lobbyReply" field.</summary>
    public const int LobbyReplyFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.LobbyReply LobbyReply {
      get { return replyCase_ == ReplyOneofCase.LobbyReply ? (global::DurakServer.LobbyReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.LobbyReply;
      }
    }

    /// <summary>Field number for the "dialogReply" field.</summary>
    public const int DialogReplyFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DialogReply DialogReply {
      get { return replyCase_ == ReplyOneofCase.DialogReply ? (global::DurakServer.DialogReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.DialogReply;
      }
    }

    /// <summary>Field number for the "turnReply" field.</summary>
    public const int TurnReplyFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.TurnReply TurnReply {
      get { return replyCase_ == ReplyOneofCase.TurnReply ? (global::DurakServer.TurnReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.TurnReply;
      }
    }

    /// <summary>Field number for the "endAttackReply" field.</summary>
    public const int EndAttackReplyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EndAttackReply EndAttackReply {
      get { return replyCase_ == ReplyOneofCase.EndAttackReply ? (global::DurakServer.EndAttackReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.EndAttackReply;
      }
    }

    /// <summary>Field number for the "endDefenceReply" field.</summary>
    public const int EndDefenceReplyFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EndDefenceReply EndDefenceReply {
      get { return replyCase_ == ReplyOneofCase.EndDefenceReply ? (global::DurakServer.EndDefenceReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.EndDefenceReply;
      }
    }

    /// <summary>Field number for the "endAddingReply" field.</summary>
    public const int EndAddingReplyFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EndAddingReply EndAddingReply {
      get { return replyCase_ == ReplyOneofCase.EndAddingReply ? (global::DurakServer.EndAddingReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.EndAddingReply;
      }
    }

    /// <summary>Field number for the "finishGameRoundReply" field.</summary>
    public const int FinishGameRoundReplyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.FinishGameRoundReply FinishGameRoundReply {
      get { return replyCase_ == ReplyOneofCase.FinishGameRoundReply ? (global::DurakServer.FinishGameRoundReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.FinishGameRoundReply;
      }
    }

    /// <summary>Field number for the "enableTwoPlayersModeReply" field.</summary>
    public const int EnableTwoPlayersModeReplyFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.EnableTwoPlayersModeReply EnableTwoPlayersModeReply {
      get { return replyCase_ == ReplyOneofCase.EnableTwoPlayersModeReply ? (global::DurakServer.EnableTwoPlayersModeReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.EnableTwoPlayersModeReply;
      }
    }

    /// <summary>Field number for the "gameEndReply" field.</summary>
    public const int GameEndReplyFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.GameEndReply GameEndReply {
      get { return replyCase_ == ReplyOneofCase.GameEndReply ? (global::DurakServer.GameEndReply) reply_ : null; }
      set {
        reply_ = value;
        replyCase_ = value == null ? ReplyOneofCase.None : ReplyOneofCase.GameEndReply;
      }
    }

    private object reply_;
    /// <summary>Enum of possible cases for the "Reply" oneof.</summary>
    public enum ReplyOneofCase {
      None = 0,
      LobbyReply = 1,
      DialogReply = 2,
      TurnReply = 3,
      EndAttackReply = 4,
      EndDefenceReply = 5,
      EndAddingReply = 6,
      FinishGameRoundReply = 7,
      EnableTwoPlayersModeReply = 8,
      GameEndReply = 9,
    }
    private ReplyOneofCase replyCase_ = ReplyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyOneofCase ReplyCase {
      get { return replyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReply() {
      replyCase_ = ReplyOneofCase.None;
      reply_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurakReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurakReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LobbyReply, other.LobbyReply)) return false;
      if (!object.Equals(DialogReply, other.DialogReply)) return false;
      if (!object.Equals(TurnReply, other.TurnReply)) return false;
      if (!object.Equals(EndAttackReply, other.EndAttackReply)) return false;
      if (!object.Equals(EndDefenceReply, other.EndDefenceReply)) return false;
      if (!object.Equals(EndAddingReply, other.EndAddingReply)) return false;
      if (!object.Equals(FinishGameRoundReply, other.FinishGameRoundReply)) return false;
      if (!object.Equals(EnableTwoPlayersModeReply, other.EnableTwoPlayersModeReply)) return false;
      if (!object.Equals(GameEndReply, other.GameEndReply)) return false;
      if (ReplyCase != other.ReplyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (replyCase_ == ReplyOneofCase.LobbyReply) hash ^= LobbyReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.DialogReply) hash ^= DialogReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.TurnReply) hash ^= TurnReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.EndAttackReply) hash ^= EndAttackReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.EndDefenceReply) hash ^= EndDefenceReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.EndAddingReply) hash ^= EndAddingReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.FinishGameRoundReply) hash ^= FinishGameRoundReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.EnableTwoPlayersModeReply) hash ^= EnableTwoPlayersModeReply.GetHashCode();
      if (replyCase_ == ReplyOneofCase.GameEndReply) hash ^= GameEndReply.GetHashCode();
      hash ^= (int) replyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (replyCase_ == ReplyOneofCase.LobbyReply) {
        output.WriteRawTag(10);
        output.WriteMessage(LobbyReply);
      }
      if (replyCase_ == ReplyOneofCase.DialogReply) {
        output.WriteRawTag(18);
        output.WriteMessage(DialogReply);
      }
      if (replyCase_ == ReplyOneofCase.TurnReply) {
        output.WriteRawTag(26);
        output.WriteMessage(TurnReply);
      }
      if (replyCase_ == ReplyOneofCase.EndAttackReply) {
        output.WriteRawTag(34);
        output.WriteMessage(EndAttackReply);
      }
      if (replyCase_ == ReplyOneofCase.EndDefenceReply) {
        output.WriteRawTag(42);
        output.WriteMessage(EndDefenceReply);
      }
      if (replyCase_ == ReplyOneofCase.EndAddingReply) {
        output.WriteRawTag(50);
        output.WriteMessage(EndAddingReply);
      }
      if (replyCase_ == ReplyOneofCase.FinishGameRoundReply) {
        output.WriteRawTag(58);
        output.WriteMessage(FinishGameRoundReply);
      }
      if (replyCase_ == ReplyOneofCase.EnableTwoPlayersModeReply) {
        output.WriteRawTag(66);
        output.WriteMessage(EnableTwoPlayersModeReply);
      }
      if (replyCase_ == ReplyOneofCase.GameEndReply) {
        output.WriteRawTag(74);
        output.WriteMessage(GameEndReply);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (replyCase_ == ReplyOneofCase.LobbyReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyReply);
      }
      if (replyCase_ == ReplyOneofCase.DialogReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DialogReply);
      }
      if (replyCase_ == ReplyOneofCase.TurnReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnReply);
      }
      if (replyCase_ == ReplyOneofCase.EndAttackReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndAttackReply);
      }
      if (replyCase_ == ReplyOneofCase.EndDefenceReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDefenceReply);
      }
      if (replyCase_ == ReplyOneofCase.EndAddingReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndAddingReply);
      }
      if (replyCase_ == ReplyOneofCase.FinishGameRoundReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinishGameRoundReply);
      }
      if (replyCase_ == ReplyOneofCase.EnableTwoPlayersModeReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnableTwoPlayersModeReply);
      }
      if (replyCase_ == ReplyOneofCase.GameEndReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameEndReply);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurakReply other) {
      if (other == null) {
        return;
      }
      switch (other.ReplyCase) {
        case ReplyOneofCase.LobbyReply:
          if (LobbyReply == null) {
            LobbyReply = new global::DurakServer.LobbyReply();
          }
          LobbyReply.MergeFrom(other.LobbyReply);
          break;
        case ReplyOneofCase.DialogReply:
          if (DialogReply == null) {
            DialogReply = new global::DurakServer.DialogReply();
          }
          DialogReply.MergeFrom(other.DialogReply);
          break;
        case ReplyOneofCase.TurnReply:
          if (TurnReply == null) {
            TurnReply = new global::DurakServer.TurnReply();
          }
          TurnReply.MergeFrom(other.TurnReply);
          break;
        case ReplyOneofCase.EndAttackReply:
          if (EndAttackReply == null) {
            EndAttackReply = new global::DurakServer.EndAttackReply();
          }
          EndAttackReply.MergeFrom(other.EndAttackReply);
          break;
        case ReplyOneofCase.EndDefenceReply:
          if (EndDefenceReply == null) {
            EndDefenceReply = new global::DurakServer.EndDefenceReply();
          }
          EndDefenceReply.MergeFrom(other.EndDefenceReply);
          break;
        case ReplyOneofCase.EndAddingReply:
          if (EndAddingReply == null) {
            EndAddingReply = new global::DurakServer.EndAddingReply();
          }
          EndAddingReply.MergeFrom(other.EndAddingReply);
          break;
        case ReplyOneofCase.FinishGameRoundReply:
          if (FinishGameRoundReply == null) {
            FinishGameRoundReply = new global::DurakServer.FinishGameRoundReply();
          }
          FinishGameRoundReply.MergeFrom(other.FinishGameRoundReply);
          break;
        case ReplyOneofCase.EnableTwoPlayersModeReply:
          if (EnableTwoPlayersModeReply == null) {
            EnableTwoPlayersModeReply = new global::DurakServer.EnableTwoPlayersModeReply();
          }
          EnableTwoPlayersModeReply.MergeFrom(other.EnableTwoPlayersModeReply);
          break;
        case ReplyOneofCase.GameEndReply:
          if (GameEndReply == null) {
            GameEndReply = new global::DurakServer.GameEndReply();
          }
          GameEndReply.MergeFrom(other.GameEndReply);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::DurakServer.LobbyReply subBuilder = new global::DurakServer.LobbyReply();
            if (replyCase_ == ReplyOneofCase.LobbyReply) {
              subBuilder.MergeFrom(LobbyReply);
            }
            input.ReadMessage(subBuilder);
            LobbyReply = subBuilder;
            break;
          }
          case 18: {
            global::DurakServer.DialogReply subBuilder = new global::DurakServer.DialogReply();
            if (replyCase_ == ReplyOneofCase.DialogReply) {
              subBuilder.MergeFrom(DialogReply);
            }
            input.ReadMessage(subBuilder);
            DialogReply = subBuilder;
            break;
          }
          case 26: {
            global::DurakServer.TurnReply subBuilder = new global::DurakServer.TurnReply();
            if (replyCase_ == ReplyOneofCase.TurnReply) {
              subBuilder.MergeFrom(TurnReply);
            }
            input.ReadMessage(subBuilder);
            TurnReply = subBuilder;
            break;
          }
          case 34: {
            global::DurakServer.EndAttackReply subBuilder = new global::DurakServer.EndAttackReply();
            if (replyCase_ == ReplyOneofCase.EndAttackReply) {
              subBuilder.MergeFrom(EndAttackReply);
            }
            input.ReadMessage(subBuilder);
            EndAttackReply = subBuilder;
            break;
          }
          case 42: {
            global::DurakServer.EndDefenceReply subBuilder = new global::DurakServer.EndDefenceReply();
            if (replyCase_ == ReplyOneofCase.EndDefenceReply) {
              subBuilder.MergeFrom(EndDefenceReply);
            }
            input.ReadMessage(subBuilder);
            EndDefenceReply = subBuilder;
            break;
          }
          case 50: {
            global::DurakServer.EndAddingReply subBuilder = new global::DurakServer.EndAddingReply();
            if (replyCase_ == ReplyOneofCase.EndAddingReply) {
              subBuilder.MergeFrom(EndAddingReply);
            }
            input.ReadMessage(subBuilder);
            EndAddingReply = subBuilder;
            break;
          }
          case 58: {
            global::DurakServer.FinishGameRoundReply subBuilder = new global::DurakServer.FinishGameRoundReply();
            if (replyCase_ == ReplyOneofCase.FinishGameRoundReply) {
              subBuilder.MergeFrom(FinishGameRoundReply);
            }
            input.ReadMessage(subBuilder);
            FinishGameRoundReply = subBuilder;
            break;
          }
          case 66: {
            global::DurakServer.EnableTwoPlayersModeReply subBuilder = new global::DurakServer.EnableTwoPlayersModeReply();
            if (replyCase_ == ReplyOneofCase.EnableTwoPlayersModeReply) {
              subBuilder.MergeFrom(EnableTwoPlayersModeReply);
            }
            input.ReadMessage(subBuilder);
            EnableTwoPlayersModeReply = subBuilder;
            break;
          }
          case 74: {
            global::DurakServer.GameEndReply subBuilder = new global::DurakServer.GameEndReply();
            if (replyCase_ == ReplyOneofCase.GameEndReply) {
              subBuilder.MergeFrom(GameEndReply);
            }
            input.ReadMessage(subBuilder);
            GameEndReply = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LobbyReply : pb::IMessage<LobbyReply> {
    private static readonly pb::MessageParser<LobbyReply> _parser = new pb::MessageParser<LobbyReply>(() => new LobbyReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyReply(LobbyReply other) : this() {
      id_ = other.id_;
      iPlayer_ = other.iPlayer_ != null ? other.iPlayer_.Clone() : null;
      enemyPlayers_ = other.enemyPlayers_.Clone();
      deckBox_ = other.deckBox_.Clone();
      trump_ = other.trump_ != null ? other.trump_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyReply Clone() {
      return new LobbyReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "iPlayer" field.</summary>
    public const int IPlayerFieldNumber = 2;
    private global::DurakServer.DurakNetPlayer iPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DurakNetPlayer IPlayer {
      get { return iPlayer_; }
      set {
        iPlayer_ = value;
      }
    }

    /// <summary>Field number for the "enemyPlayers" field.</summary>
    public const int EnemyPlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DurakServer.DurakNetPlayer> _repeated_enemyPlayers_codec
        = pb::FieldCodec.ForMessage(26, global::DurakServer.DurakNetPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.DurakNetPlayer> enemyPlayers_ = new pbc::RepeatedField<global::DurakServer.DurakNetPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.DurakNetPlayer> EnemyPlayers {
      get { return enemyPlayers_; }
    }

    /// <summary>Field number for the "deckBox" field.</summary>
    public const int DeckBoxFieldNumber = 4;
    private static readonly pb::FieldCodec<global::DurakServer.Card> _repeated_deckBox_codec
        = pb::FieldCodec.ForMessage(34, global::DurakServer.Card.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.Card> deckBox_ = new pbc::RepeatedField<global::DurakServer.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.Card> DeckBox {
      get { return deckBox_; }
    }

    /// <summary>Field number for the "trump" field.</summary>
    public const int TrumpFieldNumber = 5;
    private global::DurakServer.Card trump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Card Trump {
      get { return trump_; }
      set {
        trump_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(IPlayer, other.IPlayer)) return false;
      if(!enemyPlayers_.Equals(other.enemyPlayers_)) return false;
      if(!deckBox_.Equals(other.deckBox_)) return false;
      if (!object.Equals(Trump, other.Trump)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (iPlayer_ != null) hash ^= IPlayer.GetHashCode();
      hash ^= enemyPlayers_.GetHashCode();
      hash ^= deckBox_.GetHashCode();
      if (trump_ != null) hash ^= Trump.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (iPlayer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IPlayer);
      }
      enemyPlayers_.WriteTo(output, _repeated_enemyPlayers_codec);
      deckBox_.WriteTo(output, _repeated_deckBox_codec);
      if (trump_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Trump);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (iPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IPlayer);
      }
      size += enemyPlayers_.CalculateSize(_repeated_enemyPlayers_codec);
      size += deckBox_.CalculateSize(_repeated_deckBox_codec);
      if (trump_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trump);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.iPlayer_ != null) {
        if (iPlayer_ == null) {
          IPlayer = new global::DurakServer.DurakNetPlayer();
        }
        IPlayer.MergeFrom(other.IPlayer);
      }
      enemyPlayers_.Add(other.enemyPlayers_);
      deckBox_.Add(other.deckBox_);
      if (other.trump_ != null) {
        if (trump_ == null) {
          Trump = new global::DurakServer.Card();
        }
        Trump.MergeFrom(other.Trump);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (iPlayer_ == null) {
              IPlayer = new global::DurakServer.DurakNetPlayer();
            }
            input.ReadMessage(IPlayer);
            break;
          }
          case 26: {
            enemyPlayers_.AddEntriesFrom(input, _repeated_enemyPlayers_codec);
            break;
          }
          case 34: {
            deckBox_.AddEntriesFrom(input, _repeated_deckBox_codec);
            break;
          }
          case 42: {
            if (trump_ == null) {
              Trump = new global::DurakServer.Card();
            }
            input.ReadMessage(Trump);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DialogReply : pb::IMessage<DialogReply> {
    private static readonly pb::MessageParser<DialogReply> _parser = new pb::MessageParser<DialogReply>(() => new DialogReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DialogReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogReply(DialogReply other) : this() {
      dialog_ = other.dialog_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogReply Clone() {
      return new DialogReply(this);
    }

    /// <summary>Field number for the "dialog" field.</summary>
    public const int DialogFieldNumber = 1;
    private global::DurakServer.Dialog dialog_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Dialog Dialog {
      get { return dialog_; }
      set {
        dialog_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DialogReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DialogReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dialog != other.Dialog) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dialog != 0) hash ^= Dialog.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dialog != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Dialog);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dialog != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dialog);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DialogReply other) {
      if (other == null) {
        return;
      }
      if (other.Dialog != 0) {
        Dialog = other.Dialog;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dialog = (global::DurakServer.Dialog) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnReply : pb::IMessage<TurnReply> {
    private static readonly pb::MessageParser<TurnReply> _parser = new pb::MessageParser<TurnReply>(() => new TurnReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnReply(TurnReply other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnReply Clone() {
      return new TurnReply(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::DurakServer.Card card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnReply other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::DurakServer.Card();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::DurakServer.Card();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndAttackReply : pb::IMessage<EndAttackReply> {
    private static readonly pb::MessageParser<EndAttackReply> _parser = new pb::MessageParser<EndAttackReply>(() => new EndAttackReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndAttackReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAttackReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAttackReply(EndAttackReply other) : this() {
      iPlayer_ = other.iPlayer_ != null ? other.iPlayer_.Clone() : null;
      enemyPlayers_ = other.enemyPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAttackReply Clone() {
      return new EndAttackReply(this);
    }

    /// <summary>Field number for the "iPlayer" field.</summary>
    public const int IPlayerFieldNumber = 1;
    private global::DurakServer.DurakNetPlayer iPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DurakNetPlayer IPlayer {
      get { return iPlayer_; }
      set {
        iPlayer_ = value;
      }
    }

    /// <summary>Field number for the "enemyPlayers" field.</summary>
    public const int EnemyPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DurakServer.DurakNetPlayer> _repeated_enemyPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::DurakServer.DurakNetPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.DurakNetPlayer> enemyPlayers_ = new pbc::RepeatedField<global::DurakServer.DurakNetPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.DurakNetPlayer> EnemyPlayers {
      get { return enemyPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndAttackReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndAttackReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IPlayer, other.IPlayer)) return false;
      if(!enemyPlayers_.Equals(other.enemyPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iPlayer_ != null) hash ^= IPlayer.GetHashCode();
      hash ^= enemyPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iPlayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IPlayer);
      }
      enemyPlayers_.WriteTo(output, _repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IPlayer);
      }
      size += enemyPlayers_.CalculateSize(_repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndAttackReply other) {
      if (other == null) {
        return;
      }
      if (other.iPlayer_ != null) {
        if (iPlayer_ == null) {
          IPlayer = new global::DurakServer.DurakNetPlayer();
        }
        IPlayer.MergeFrom(other.IPlayer);
      }
      enemyPlayers_.Add(other.enemyPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (iPlayer_ == null) {
              IPlayer = new global::DurakServer.DurakNetPlayer();
            }
            input.ReadMessage(IPlayer);
            break;
          }
          case 18: {
            enemyPlayers_.AddEntriesFrom(input, _repeated_enemyPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndDefenceReply : pb::IMessage<EndDefenceReply> {
    private static readonly pb::MessageParser<EndDefenceReply> _parser = new pb::MessageParser<EndDefenceReply>(() => new EndDefenceReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndDefenceReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndDefenceReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndDefenceReply(EndDefenceReply other) : this() {
      iPlayer_ = other.iPlayer_ != null ? other.iPlayer_.Clone() : null;
      enemyPlayers_ = other.enemyPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndDefenceReply Clone() {
      return new EndDefenceReply(this);
    }

    /// <summary>Field number for the "iPlayer" field.</summary>
    public const int IPlayerFieldNumber = 1;
    private global::DurakServer.DurakNetPlayer iPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DurakNetPlayer IPlayer {
      get { return iPlayer_; }
      set {
        iPlayer_ = value;
      }
    }

    /// <summary>Field number for the "enemyPlayers" field.</summary>
    public const int EnemyPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DurakServer.DurakNetPlayer> _repeated_enemyPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::DurakServer.DurakNetPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.DurakNetPlayer> enemyPlayers_ = new pbc::RepeatedField<global::DurakServer.DurakNetPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.DurakNetPlayer> EnemyPlayers {
      get { return enemyPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndDefenceReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndDefenceReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IPlayer, other.IPlayer)) return false;
      if(!enemyPlayers_.Equals(other.enemyPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iPlayer_ != null) hash ^= IPlayer.GetHashCode();
      hash ^= enemyPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iPlayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IPlayer);
      }
      enemyPlayers_.WriteTo(output, _repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IPlayer);
      }
      size += enemyPlayers_.CalculateSize(_repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndDefenceReply other) {
      if (other == null) {
        return;
      }
      if (other.iPlayer_ != null) {
        if (iPlayer_ == null) {
          IPlayer = new global::DurakServer.DurakNetPlayer();
        }
        IPlayer.MergeFrom(other.IPlayer);
      }
      enemyPlayers_.Add(other.enemyPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (iPlayer_ == null) {
              IPlayer = new global::DurakServer.DurakNetPlayer();
            }
            input.ReadMessage(IPlayer);
            break;
          }
          case 18: {
            enemyPlayers_.AddEntriesFrom(input, _repeated_enemyPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndAddingReply : pb::IMessage<EndAddingReply> {
    private static readonly pb::MessageParser<EndAddingReply> _parser = new pb::MessageParser<EndAddingReply>(() => new EndAddingReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndAddingReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAddingReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAddingReply(EndAddingReply other) : this() {
      iPlayer_ = other.iPlayer_ != null ? other.iPlayer_.Clone() : null;
      enemyPlayers_ = other.enemyPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndAddingReply Clone() {
      return new EndAddingReply(this);
    }

    /// <summary>Field number for the "iPlayer" field.</summary>
    public const int IPlayerFieldNumber = 1;
    private global::DurakServer.DurakNetPlayer iPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DurakNetPlayer IPlayer {
      get { return iPlayer_; }
      set {
        iPlayer_ = value;
      }
    }

    /// <summary>Field number for the "enemyPlayers" field.</summary>
    public const int EnemyPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DurakServer.DurakNetPlayer> _repeated_enemyPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::DurakServer.DurakNetPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.DurakNetPlayer> enemyPlayers_ = new pbc::RepeatedField<global::DurakServer.DurakNetPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.DurakNetPlayer> EnemyPlayers {
      get { return enemyPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndAddingReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndAddingReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IPlayer, other.IPlayer)) return false;
      if(!enemyPlayers_.Equals(other.enemyPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iPlayer_ != null) hash ^= IPlayer.GetHashCode();
      hash ^= enemyPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iPlayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IPlayer);
      }
      enemyPlayers_.WriteTo(output, _repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IPlayer);
      }
      size += enemyPlayers_.CalculateSize(_repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndAddingReply other) {
      if (other == null) {
        return;
      }
      if (other.iPlayer_ != null) {
        if (iPlayer_ == null) {
          IPlayer = new global::DurakServer.DurakNetPlayer();
        }
        IPlayer.MergeFrom(other.IPlayer);
      }
      enemyPlayers_.Add(other.enemyPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (iPlayer_ == null) {
              IPlayer = new global::DurakServer.DurakNetPlayer();
            }
            input.ReadMessage(IPlayer);
            break;
          }
          case 18: {
            enemyPlayers_.AddEntriesFrom(input, _repeated_enemyPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinishGameRoundReply : pb::IMessage<FinishGameRoundReply> {
    private static readonly pb::MessageParser<FinishGameRoundReply> _parser = new pb::MessageParser<FinishGameRoundReply>(() => new FinishGameRoundReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishGameRoundReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishGameRoundReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishGameRoundReply(FinishGameRoundReply other) : this() {
      iPlayer_ = other.iPlayer_ != null ? other.iPlayer_.Clone() : null;
      enemyPlayers_ = other.enemyPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishGameRoundReply Clone() {
      return new FinishGameRoundReply(this);
    }

    /// <summary>Field number for the "iPlayer" field.</summary>
    public const int IPlayerFieldNumber = 1;
    private global::DurakServer.DurakNetPlayer iPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DurakNetPlayer IPlayer {
      get { return iPlayer_; }
      set {
        iPlayer_ = value;
      }
    }

    /// <summary>Field number for the "enemyPlayers" field.</summary>
    public const int EnemyPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DurakServer.DurakNetPlayer> _repeated_enemyPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::DurakServer.DurakNetPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.DurakNetPlayer> enemyPlayers_ = new pbc::RepeatedField<global::DurakServer.DurakNetPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.DurakNetPlayer> EnemyPlayers {
      get { return enemyPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishGameRoundReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishGameRoundReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IPlayer, other.IPlayer)) return false;
      if(!enemyPlayers_.Equals(other.enemyPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iPlayer_ != null) hash ^= IPlayer.GetHashCode();
      hash ^= enemyPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iPlayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IPlayer);
      }
      enemyPlayers_.WriteTo(output, _repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IPlayer);
      }
      size += enemyPlayers_.CalculateSize(_repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishGameRoundReply other) {
      if (other == null) {
        return;
      }
      if (other.iPlayer_ != null) {
        if (iPlayer_ == null) {
          IPlayer = new global::DurakServer.DurakNetPlayer();
        }
        IPlayer.MergeFrom(other.IPlayer);
      }
      enemyPlayers_.Add(other.enemyPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (iPlayer_ == null) {
              IPlayer = new global::DurakServer.DurakNetPlayer();
            }
            input.ReadMessage(IPlayer);
            break;
          }
          case 18: {
            enemyPlayers_.AddEntriesFrom(input, _repeated_enemyPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnableTwoPlayersModeReply : pb::IMessage<EnableTwoPlayersModeReply> {
    private static readonly pb::MessageParser<EnableTwoPlayersModeReply> _parser = new pb::MessageParser<EnableTwoPlayersModeReply>(() => new EnableTwoPlayersModeReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableTwoPlayersModeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableTwoPlayersModeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableTwoPlayersModeReply(EnableTwoPlayersModeReply other) : this() {
      iPlayer_ = other.iPlayer_ != null ? other.iPlayer_.Clone() : null;
      enemyPlayers_ = other.enemyPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableTwoPlayersModeReply Clone() {
      return new EnableTwoPlayersModeReply(this);
    }

    /// <summary>Field number for the "iPlayer" field.</summary>
    public const int IPlayerFieldNumber = 1;
    private global::DurakServer.DurakNetPlayer iPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.DurakNetPlayer IPlayer {
      get { return iPlayer_; }
      set {
        iPlayer_ = value;
      }
    }

    /// <summary>Field number for the "enemyPlayers" field.</summary>
    public const int EnemyPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DurakServer.DurakNetPlayer> _repeated_enemyPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::DurakServer.DurakNetPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.DurakNetPlayer> enemyPlayers_ = new pbc::RepeatedField<global::DurakServer.DurakNetPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.DurakNetPlayer> EnemyPlayers {
      get { return enemyPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableTwoPlayersModeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableTwoPlayersModeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IPlayer, other.IPlayer)) return false;
      if(!enemyPlayers_.Equals(other.enemyPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iPlayer_ != null) hash ^= IPlayer.GetHashCode();
      hash ^= enemyPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iPlayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IPlayer);
      }
      enemyPlayers_.WriteTo(output, _repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IPlayer);
      }
      size += enemyPlayers_.CalculateSize(_repeated_enemyPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableTwoPlayersModeReply other) {
      if (other == null) {
        return;
      }
      if (other.iPlayer_ != null) {
        if (iPlayer_ == null) {
          IPlayer = new global::DurakServer.DurakNetPlayer();
        }
        IPlayer.MergeFrom(other.IPlayer);
      }
      enemyPlayers_.Add(other.enemyPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (iPlayer_ == null) {
              IPlayer = new global::DurakServer.DurakNetPlayer();
            }
            input.ReadMessage(IPlayer);
            break;
          }
          case 18: {
            enemyPlayers_.AddEntriesFrom(input, _repeated_enemyPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEndReply : pb::IMessage<GameEndReply> {
    private static readonly pb::MessageParser<GameEndReply> _parser = new pb::MessageParser<GameEndReply>(() => new GameEndReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEndReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndReply(GameEndReply other) : this() {
      winnerPlayers_ = other.winnerPlayers_.Clone();
      winMessage_ = other.winMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndReply Clone() {
      return new GameEndReply(this);
    }

    /// <summary>Field number for the "winnerPlayers" field.</summary>
    public const int WinnerPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DurakServer.WinnerPlayer> _repeated_winnerPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::DurakServer.WinnerPlayer.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.WinnerPlayer> winnerPlayers_ = new pbc::RepeatedField<global::DurakServer.WinnerPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.WinnerPlayer> WinnerPlayers {
      get { return winnerPlayers_; }
    }

    /// <summary>Field number for the "winMessage" field.</summary>
    public const int WinMessageFieldNumber = 2;
    private string winMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinMessage {
      get { return winMessage_; }
      set {
        winMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEndReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEndReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!winnerPlayers_.Equals(other.winnerPlayers_)) return false;
      if (WinMessage != other.WinMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= winnerPlayers_.GetHashCode();
      if (WinMessage.Length != 0) hash ^= WinMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      winnerPlayers_.WriteTo(output, _repeated_winnerPlayers_codec);
      if (WinMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WinMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += winnerPlayers_.CalculateSize(_repeated_winnerPlayers_codec);
      if (WinMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEndReply other) {
      if (other == null) {
        return;
      }
      winnerPlayers_.Add(other.winnerPlayers_);
      if (other.WinMessage.Length != 0) {
        WinMessage = other.WinMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            winnerPlayers_.AddEntriesFrom(input, _repeated_winnerPlayers_codec);
            break;
          }
          case 18: {
            WinMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WinnerPlayer : pb::IMessage<WinnerPlayer> {
    private static readonly pb::MessageParser<WinnerPlayer> _parser = new pb::MessageParser<WinnerPlayer>(() => new WinnerPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WinnerPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinnerPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinnerPlayer(WinnerPlayer other) : this() {
      username_ = other.username_;
      beetCount_ = other.beetCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinnerPlayer Clone() {
      return new WinnerPlayer(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beetCount" field.</summary>
    public const int BeetCountFieldNumber = 2;
    private int beetCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeetCount {
      get { return beetCount_; }
      set {
        beetCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WinnerPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WinnerPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (BeetCount != other.BeetCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (BeetCount != 0) hash ^= BeetCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (BeetCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BeetCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (BeetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeetCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WinnerPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.BeetCount != 0) {
        BeetCount = other.BeetCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 16: {
            BeetCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimerReply : pb::IMessage<TimerReply> {
    private static readonly pb::MessageParser<TimerReply> _parser = new pb::MessageParser<TimerReply>(() => new TimerReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimerReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerReply(TimerReply other) : this() {
      time_ = other.time_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerReply Clone() {
      return new TimerReply(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimerReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimerReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimerReply other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DurakNetPlayer : pb::IMessage<DurakNetPlayer> {
    private static readonly pb::MessageParser<DurakNetPlayer> _parser = new pb::MessageParser<DurakNetPlayer>(() => new DurakNetPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurakNetPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakNetPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakNetPlayer(DurakNetPlayer other) : this() {
      username_ = other.username_;
      hand_ = other.hand_.Clone();
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurakNetPlayer Clone() {
      return new DurakNetPlayer(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DurakServer.Card> _repeated_hand_codec
        = pb::FieldCodec.ForMessage(18, global::DurakServer.Card.Parser);
    private readonly pbc::RepeatedField<global::DurakServer.Card> hand_ = new pbc::RepeatedField<global::DurakServer.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DurakServer.Card> Hand {
      get { return hand_; }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 3;
    private global::DurakServer.Role role_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurakNetPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurakNetPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if(!hand_.Equals(other.hand_)) return false;
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      hash ^= hand_.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      hand_.WriteTo(output, _repeated_hand_codec);
      if (Role != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      size += hand_.CalculateSize(_repeated_hand_codec);
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurakNetPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      hand_.Add(other.hand_);
      if (other.Role != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
          case 24: {
            Role = (global::DurakServer.Role) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DurakServer.DurakReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      rank_ = other.rank_;
      suit_ = other.suit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private global::DurakServer.Rank rank_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Rank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 2;
    private global::DurakServer.Suit suit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DurakServer.Suit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (Suit != other.Suit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Suit != 0) hash ^= Suit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Rank);
      }
      if (Suit != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Suit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (Suit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Suit != 0) {
        Suit = other.Suit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = (global::DurakServer.Rank) input.ReadEnum();
            break;
          }
          case 16: {
            Suit = (global::DurakServer.Suit) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
